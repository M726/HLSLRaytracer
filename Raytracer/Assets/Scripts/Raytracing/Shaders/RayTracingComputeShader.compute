// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
//The Notes Section
//Albedo - Base Color
//Specular - Metalness
//Diffuse - Non-metalic/roughness
    //Probablility for diffuse ray to have some angle in radians p(x)=(acos(2x-1)-pi/2)
        //modeled from lambert's cosine law

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;
float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;
float _RandomSeed;
int _Rays;

static const float PI = 3.14159265f;
static const float3 f3one = float3(1.0, 1.0, 1.0);
static const float3 f3zero = float3(0.0, 0.0, 0.0);

//Camera Setup
float2 _ClippingPlanes;


float3x3 GetRotationMatrix(float3 angles)
{
    
    float pitch = fmod(angles.z, 2 * PI);
    float yaw = fmod(angles.y, 2 * PI);
    float roll = fmod(angles.x, 2 * PI);
    
    float sa = sin(pitch);
    float sb = sin(yaw);
    float sc = sin(roll);
    
    float ca = cos(pitch);
    float cb = cos(yaw);
    float cc = cos(roll);
    
    float3x3 mpitch = float3x3(ca, -sa, 0, sa, ca, 0, 0, 0, 1);
    float3x3 myaw = float3x3(cb, 0, sb, 0, 1, 0, -sb, 0, cb);
    float3x3 mroll = float3x3(1, 0, 0, 0, cc, -sc, 0, sc, cc);
    
    //yaw->roll
    //yaw->pitch
    return mul(myaw, mul(mroll, mpitch));
    
    //return float3x3(
    //    ca * cb, ca * sb * sc - sa * cc, ca * sb * cc + sa * sc,
    //    sa * cb, sa * sb * sc + ca * cc, sa * sb * cc - ca * sc,
    //    -sb, cb * sc, cb * cc);

}

float3x3 GetRotationMatrix(float4 quaternion)
{
    float4 q = float4(-quaternion.x, quaternion.y, quaternion.z, quaternion.w) / length(quaternion);
    
    float m11 = 1 - 2 * (q.y * q.y + q.z * q.z);
    float m12 = 2 * (q.x * q.y - q.z * q.w);
    float m13 = 2 * (q.x * q.z + q.y * q.w);
    
    float m21 = 2 * (q.x * q.y + q.z * q.w);
    float m22 = 1 - 2 * (q.x * q.x + q.z * q.z);
    float m23 = 2 * (q.y * q.z - q.x * q.w);
    
    float m31 = 2 * (q.x * q.z - q.y * q.w);
    float m32 = 2 * (q.y * q.z - q.x * q.w);
    float m33 = 1 - 2 * (q.x * q.x + q.y * q.y);
    
    return float3x3(m11, m12, m13, m21, m22, m23, m31, m32, m33);
    //return float3x3(m11, m13, m12, m21, m23, m22, m31, m33, m32);
}
float3x3 GetInverseMatrix(float3x3 r)
{
    //I'm almost certain this works based on AA^-1=I tests
    //From linear algebra book 181
        //A^-1 = 1/(det(A)) * adj(A)
        //adj(A) = transpose of the matrix of cofactors
    float m11 = r._22 * r._33 - r._23 * r._32;
    float m12 = -r._12 * r._33 + r._13 * r._32;
    float m13 = r._12 * r._23 - r._13 * r._22;
    
    float m21 = -r._21 * r._33 + r._23 * r._31;
    float m22 = r._11 * r._33 - r._13 * r._31;
    float m23 = -r._11 * r._23 + r._13 * r._21;
    
    float m31 = r._21 * r._33 - r._22 * r._31;
    float m32 = -r._11 * r._32 + r._12 * r._31;
    float m33 = r._11 * r._22 - r._12 * r._21;
    
    return (1 / determinant(r)) * float3x3(m11, m12, m13, m21, m22, m23, m31, m32, m33);

}

struct MaterialProperties
{
    float3 diffuseColor;
    float3 specularColor;
    float3 emissiveColor;
    float3 transmissiveColor;
    float diffuse;
    float specular;
    float emissive;
    float opacity;
    float refraction;
    
};

struct ShaderObject
{
    int id;
    int type;
    float3 position;
    float3 scale;
    float3 rotation;
    MaterialProperties material;
};
struct Ray
{
    float3 origin;
    float3 direction;
};
struct RayHit
{
    float3 position;
    float3 normal;
    float distance;
    MaterialProperties mat;
};
struct LightDirectional
{
    float3 position;
    float3 direction;
    float3 color;
    float intensity;
};

struct LightPoint
{
    float3 position;
    float3 color;
    float intensity;
};


StructuredBuffer<ShaderObject> _Objects;
StructuredBuffer<double> _PixelOffset;

MaterialProperties CreateMaterial()
{
    MaterialProperties mat;
    mat.diffuseColor = f3one;
    mat.diffuse = 1;
    mat.emissive = 0;
    mat.emissiveColor = f3one;
    mat.specular = 1;
    mat.specularColor = f3one;
    mat.refraction = 1;
    mat.transmissiveColor = f3zero;
    mat.opacity = 0;
    return mat;
}

RayHit CreateRayHit()
{
    RayHit ret;
    ret.distance = 1.#INF; //any hit should be less than this.
    ret.position = f3zero;
    ret.normal = f3zero;
    ret.mat = CreateMaterial();
    return ret;

}

float rand(float2 co)
{
    return (frac(sin(dot(float2(co.xy), float2(12.9898, 78.233))) * 43758.5453)) * 1;
}
float3 rand3(float3 co)
{
    return float3(rand(co.xy * co.yy), rand(co.yz), rand(co.xz));
}
bool randBool(float co, float cutoff)
{
    if (rand(float2(co, co + 1)) < cutoff)
        return true;
    return false;
}

void IntersectionTestPlane(ShaderObject object, Ray ray, inout RayHit bestHit)
{
    //float3 normal = float3(0, 1, 0);
    float3x3 rotationMatrix = GetRotationMatrix(object.rotation);
    float3 normal = mul(rotationMatrix, float3(0, 1, 0)); //TODO: precompute this - it should take far fewer calculations
    
    
    
    float normalDotDirection = dot(normal, ray.direction);
    
    float t = dot((object.position - ray.origin), normal) / normalDotDirection;
    float3 hitPoint = ray.origin + ray.direction * t;
    if (t > 0 && t < bestHit.distance)
    {
        float3 localposition = mul(transpose(rotationMatrix), float3(hitPoint-object.position));
        if (abs(localposition.z) <= object.scale.z / 2 && abs(localposition.x) <= object.scale.x / 2)
        {
            if (dot(normal, ray.direction) > 0)
            {
                bestHit.normal = -normalize(normal);
            }
            else
            {
                bestHit.normal = normalize(normal);
            }
            bestHit.position = hitPoint;
            bestHit.distance = t;
            bestHit.mat = object.material;
        }
    }
}

void IntersectionTestSphere(ShaderObject object, Ray ray, inout RayHit bestHit)
{
    float3 dPosition = ray.origin - object.position;
    float uDotDPosition = -dot(ray.direction, dPosition);
    float del = pow(uDotDPosition, 2) - (dot(dPosition, dPosition) - pow(object.scale.x, 2));

    if (del < 0)
        return; //No Intersection
    
    float sqrtDel = sqrt(del);
    float t = uDotDPosition - sqrtDel > 0 ? uDotDPosition - sqrtDel : uDotDPosition + sqrtDel;
    if (t > 0 && t < bestHit.distance)
    {
        float3 position = ray.origin + t * ray.direction;
        float3 normal = normalize(position - object.position);
        if (dot(normal, ray.direction) > 0)
        {
            bestHit.normal = -normal;
        }
        else
        {
            bestHit.normal = normal;
        }
        bestHit.position = position;
        bestHit.distance = t;
        bestHit.mat = object.material;
    }
}
RayHit Trace(Ray ray)
{
    //Empty Ray Collision
    ray.direction = normalize(ray.direction);
    //ray.origin += ray.direction * 0.001f;
    
    RayHit bestHit = CreateRayHit();
    
    uint numObjects, stride;
    _Objects.GetDimensions(numObjects, stride);
    for (uint i = 0; i < numObjects; i++)
    {
        switch (_Objects[i].type)
        {
            case 0:
                IntersectionTestSphere(_Objects[i], ray, bestHit);
                break;
            case 1:
                IntersectionTestPlane(_Objects[i], ray, bestHit);
                break;
        }
    }
    return bestHit;
}

float3 ShadowRay(RayHit hit)
{
    float3 color = float3(1, 0.95, 0.9);
    float3 position = float3(-0.5, 4, 0.5);
    float lightDistance = length(position - hit.position);
    
    Ray ray;
    ray.direction = normalize(position - hit.position);
    ray.origin = hit.position + hit.normal * 0.00001f;
    RayHit lightHit = Trace(ray);
    if (lightHit.distance > lightDistance && hit.distance < 1.#INF) //collision before light
    {
        //intensity += dot(hit.normal, ray.direction) * _LightPoint[light].color * _LightPoint[light].intensity / (distance * distance * 4.0 * PI);
        //float distance = lightHit.distance;
        //return color * 10 / (distance * distance * 4.0 * PI);
        
        //return f3one;
        return dot(hit.normal, ray.direction) * color * 0 / (lightDistance * lightDistance * 4.0 * PI);
    }
    return f3zero;
}

float3 RayTrace(Ray ray)
{
    RayHit hit = CreateRayHit();
    float3 result = f3zero;
    float3 colorMultiplier = f3one;
    
    for (int i = 0; i < _Rays; i++)
    {
        hit = Trace(ray);
        
        result += (ShadowRay(hit) + hit.mat.emissiveColor * hit.mat.emissive) * colorMultiplier;
        if (hit.distance < 1.#INF && length(colorMultiplier) > 0.01f)
        {
            float n1 = 1.0;
            float n2 = hit.mat.refraction;
            float theta1 = acos(dot(normalize(hit.normal), normalize(-ray.direction)));
            float theta2 = asin((n1 / n2 * sin(theta1)));
            float rs = pow((n1 * cos(theta1) - n2 * cos(theta2)) / (n1 * cos(theta1) + n2 * cos(theta2)), 2);
            float rp = pow((n1 * cos(theta2) - n2 * cos(theta1)) / (n1 * cos(theta2) + n2 * cos(theta1)), 2);
            float reflectance = (rs + rp) / 2.0;
            
            
            ray.origin = hit.position + hit.normal * 0.00001f;
            
            if (randBool(ray.direction.x * ray.direction.y * ray.direction.z, reflectance))
            {
                //Reflection
                colorMultiplier *= hit.mat.specularColor * hit.mat.specular * reflectance;
                float3 mirrorScatteringDirection = reflect(ray.direction, hit.normal);
                ray.direction = mirrorScatteringDirection;
            }else{ 
                //Refraction
                if (hit.mat.opacity == 0)
                {
                    colorMultiplier *= hit.mat.diffuseColor * hit.mat.diffuse * (1 - reflectance);
                    float3 lambertianScatteringDirection = rand3(ray.direction);
                    ray.direction = normalize(lambertianScatteringDirection / length(lambertianScatteringDirection) + hit.normal);
                }
                else
                {
                    ray.origin = hit.position - hit.normal * 0.00003f;
                }
            }
        }
        else break;
    }
    return result;
}


Ray CreateRay(float3 origin, float3 direction)
{
    Ray ray;
    ray.origin = origin;
    ray.direction = normalize(direction);
    return ray;
}
Ray CreateCameraRay(double2 uv)
{
    // Transform the camera origin to world space
    double3 origin = mul(_CameraToWorld, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;
    
    // Invert the perspective projection of the view-space position
    double3 direction = mul(_CameraInverseProjection, float4(uv, 0.0f, 1.0f)).xyz;
    // Transform the direction from camera to world space and normalize
    direction = mul(_CameraToWorld, float4(direction, 0.0f)).xyz;
    direction = (direction / length(direction));
    
    return CreateRay(origin, direction);
}


[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    uint width, height;
    Result.GetDimensions(width, height);
    
    double2 po = double2(_PixelOffset[0], _PixelOffset[1]);
    double2 uv = double2((id.xy + po) / double2(width, height) * 2.0 - 1.0);
    
    Ray ray = CreateCameraRay(uv);
    
    float3 result = RayTrace(ray);
    
    Result[id.xy] = float4(result, 1.0);
    //Result[id.xy] = float4(0.5, 0.5, 0.5, 1.0); //Test output color
    
    //Result[id.xy] = float4(id.x & id.y, (id.x & 15) / 15.0, (id.y & 15) / 15.0, 0.0);
}
