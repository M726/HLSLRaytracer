// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
//The Notes Section
//Albedo - Base Color
//Specular - Metalness
//Diffuse - Non-metalic/roughness
    //Probablility for diffuse ray to have some angle in radians p(x)=(acos(2x-1)-pi/2)
        //modeled from lambert's cosine law

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;
float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;
float _RandomSeed;

static const float PI = 3.14159265f;
static const float3 f3one = float3(1.0, 1.0, 1.0);
static const float3 f3zero = float3(0.0, 0.0, 0.0);

//Camera Setup
float2 _ClippingPlanes;

struct PBRMaterial
{
    float3 diffuseColor;
    float3 specularColor;
    float diffuse;
    float specular;
    float emissivity;
    float refractionIndex;
    float transmissionFraction;
};
struct Ray
{
    float3 origin;
    float3 direction;
};
struct RayHit
{
    float3 position;
    float3 normal;
    float distance;
    PBRMaterial mat;
};
struct ObjectPlane
{
    float3 normal;
    float3 position;
    PBRMaterial mat;
};

struct ObjectSphere {
    float3 position;
    float radius;
    PBRMaterial mat;
};

struct LightDirectional
{
    float3 position;
    float3 direction;
    float3 color;
    float intensity;
};

struct LightPoint
{
    float3 position;
    float3 color;
    float intensity;
};


StructuredBuffer<ObjectSphere> _ObjectSpheres;
StructuredBuffer<ObjectPlane> _ObjectPlanes;
StructuredBuffer<LightDirectional> _LightDirectional;
StructuredBuffer<LightPoint> _LightPoint;
StructuredBuffer<double> _PixelOffset;


PBRMaterial CreateMaterial(float3 color, float refractionIndex)
{
    PBRMaterial mat;
    mat.diffuseColor = color;
    mat.emissivity = 0.0;
    mat.refractionIndex = refractionIndex;
    return mat;
}

PBRMaterial CreateMaterial(float3 color)
{
    return CreateMaterial(color, 1.0);
}

PBRMaterial CreateMaterial()
{
    return CreateMaterial(float3(1.0, 1.0, 1.0));
}

RayHit CreateRayHit()
{
    RayHit ret;
    ret.distance = 1.#INF; //any hit should be less than this.
    ret.position = float3(0.0, 0.0, 0.0);
    ret.normal = float3(0.0, 0.0, 0.0);
    ret.mat = CreateMaterial();
    return ret;

}

float rand(float2 co)
{
    return (frac(sin(dot(float2(co.xy), float2(12.9898, 78.233))) * 43758.5453)) * 1;
}
float3 rand3(float3 co)
{
    return float3(rand(co.xy * co.yy), rand(co.yz), rand(co.xz));
}
bool randBool(float co, float cutoff)
{
    if (rand(float2(co, co + 1)) < cutoff)
        return true;
    return false;
}

void IntersectionTestObjectPlane(ObjectPlane plane, Ray ray, inout RayHit bestHit)
{
    float t = dot((plane.position - ray.origin), plane.normal) / dot(ray.direction, plane.normal);
    bool direction = (dot(plane.normal, ray.direction) > 0);
    if (!direction && t < bestHit.distance && t > 0)
    {
        bestHit.distance = t;
        bestHit.normal = plane.normal;
        bestHit.position = ray.origin + ray.direction * t;
        bestHit.mat = plane.mat;
    }

}
void IntersectionTestObjectSphere(ObjectSphere sphere, Ray ray, inout RayHit bestHit)
{
    float3 dPosition = ray.origin - sphere.position;
    float uDotDPosition = -dot(ray.direction, dPosition);
    float del = pow(uDotDPosition, 2) - (dot(dPosition, dPosition) - pow(sphere.radius, 2));

    if (del < 0)
        return; //No Intersection
    
    float sqrtDel = sqrt(del);
    float distanceFromLineOrigin = uDotDPosition - sqrtDel > 0 ? uDotDPosition - sqrtDel : uDotDPosition + sqrtDel;
    float3 position = ray.origin + distanceFromLineOrigin * ray.direction;
    
    if (!(dot((position - sphere.position), ray.direction) > 0)  && distanceFromLineOrigin - _ClippingPlanes.x > 0 && distanceFromLineOrigin - _ClippingPlanes.y < 0 && distanceFromLineOrigin < bestHit.distance)
    {
        bestHit.position = position;
        bestHit.normal = normalize(position - sphere.position);
        bestHit.distance = distanceFromLineOrigin;
        bestHit.mat = sphere.mat;
    }
}
RayHit Trace(Ray ray)
{
    //Empty Ray Collision
    ray.direction = normalize(ray.direction);
    RayHit bestHit = CreateRayHit();
    
    /*
    //Load objects
    uint numObjectSpheres, stride;
    _ObjectSpheres.GetDimensions(numObjectSpheres, stride);
    
    //Test Objects
    for (uint i = 0; i < numObjectSpheres; i++)
        IntersectionTestObjectSphere(_ObjectSpheres[i], ray, bestHit);
    
    */
    /*
    for(objects in scene){
        //Test bestHit 
    }
    */
    ObjectSphere sphere;
    sphere.radius = 3;
    sphere.position = float3(-0.5, sphere.radius, -2);
    sphere.mat = CreateMaterial(float3(0, 0, 1), 1.1);
    IntersectionTestObjectSphere(sphere, ray, bestHit);
    
    sphere.radius = 2;
    sphere.position = float3(4.0, sphere.radius, 0.0);
    sphere.mat = CreateMaterial(float3(1, 0, 0), 1.3);
    IntersectionTestObjectSphere(sphere, ray, bestHit);
    
    
    sphere.radius = 1.5;
    sphere.position = float3(3, sphere.radius, 4);
    sphere.mat = CreateMaterial(float3(0.5,1, 0.5), 377);
    IntersectionTestObjectSphere(sphere, ray, bestHit);
    
    sphere.radius = 1;
    sphere.position = float3(-3.0, sphere.radius, 0.0);
    sphere.mat = CreateMaterial(float3(0.8, 0.8, 0.8), 1.1);
    IntersectionTestObjectSphere(sphere, ray, bestHit);
    
    //Test ObjectPlane
    ObjectPlane groundObjectPlane;
    groundObjectPlane.normal = float3(0, 1, 0);
    groundObjectPlane.position = f3zero;
    groundObjectPlane.mat = CreateMaterial(float3(0.2, 0.2, 0.2));
    IntersectionTestObjectPlane(groundObjectPlane, ray, bestHit);
    
    groundObjectPlane.normal = float3(0, -1, 0);
    groundObjectPlane.position = float3(0, 10, 0);
    groundObjectPlane.mat = CreateMaterial(float3(0.7, 0.7, 0.7));
    IntersectionTestObjectPlane(groundObjectPlane, ray, bestHit);
    
    groundObjectPlane.normal = float3(1, 0, 0);
    groundObjectPlane.position = float3(-7, 0, 0);
    groundObjectPlane.mat = CreateMaterial(float3(0.2, 1, 0.2));
    IntersectionTestObjectPlane(groundObjectPlane, ray, bestHit);
    
    groundObjectPlane.normal = float3(-1, 0, 0);
    groundObjectPlane.position = float3(7, 0, 0);
    groundObjectPlane.mat = CreateMaterial(float3(1, 0.2, 0.2));
    IntersectionTestObjectPlane(groundObjectPlane, ray, bestHit);
    
    groundObjectPlane.normal = float3(0, 0, 1);
    groundObjectPlane.position = float3(0, 0, -5);
    groundObjectPlane.mat = CreateMaterial(float3(1, 1, 1));
    IntersectionTestObjectPlane(groundObjectPlane, ray, bestHit);
    
    return bestHit;
}
float3 ShadowRay(RayHit hit)
{
    float3 intensity = f3zero;
    uint numLights, stride;
    
    _LightPoint.GetDimensions(numLights, stride);
    
    for (uint light = 0; light < numLights; light++)
    {
        float distance = length(_LightPoint[light].position - hit.position);
        Ray ray;
        ray.direction = normalize(_LightPoint[light].position - hit.position);
        ray.origin = hit.position - hit.normal * 0.001;
        if (Trace(ray).distance > distance) //collision before light
        {
            //intensity += dot(hit.normal, ray.direction) * _LightPoint[light].color * _LightPoint[light].intensity / (distance * distance * 4.0 * PI);
            intensity += _LightPoint[light].color * _LightPoint[light].intensity / (distance * distance * 4.0 * PI);
        }
    }
    return intensity;
}

float3 Shade(RayHit hit, float3 colorMultiplier)
{
    //return ShadowRay(hit);
    return colorMultiplier * (ShadowRay(hit) + hit.mat.emissivity); //(ShadowRay(hit) + hit.mat.emissivity ) * (hit.mat.diffuseColor);
}

float3 RayTrace(Ray ray)
{
    
    RayHit hit = CreateRayHit();
    //Cast Ray
    hit = Trace(ray);
    
    float3 colorMultiplier = f3zero;
    float3 result = Shade(hit, colorMultiplier);
    colorMultiplier = hit.mat.diffuseColor;
    
    for (uint i = 0; i < 50; i++)
    {
        if (hit.distance < 1.#INF)
        {
            float n1 = 1.0;
            float n2 = hit.mat.refractionIndex;
            float theta1 = acos(dot(normalize(hit.normal), normalize(-ray.direction)));
            float theta2 = asin((n1 / n2 * sin(theta1)));
            float rs = pow(abs((n1 * cos(theta1) - n2 * cos(theta2)) / (n1 * cos(theta1) + n2 * cos(theta2))), 2);
            float rp = pow(abs((n1 * cos(theta2) - n2 * cos(theta1)) / (n1 * cos(theta2) + n2 * cos(theta1))), 2);
            float reflectance = (rs + rp) / 2.0;
            
            
            ray.origin = hit.position;
            
            if (randBool(ray.direction.x * ray.direction.y * ray.direction.z, reflectance))
            {
                //Specular reflection 
                    //TODO: Add specular roughness
                float3 mirrorScatteringDirection = reflect(ray.direction, hit.normal);
                ray.direction = mirrorScatteringDirection;
                hit = Trace(ray);
                hit.mat.diffuseColor = f3one;
                result += Shade(hit, colorMultiplier);
            }else{
                //Diffuse Reflection
                float3 lambertianScatteringDirection = rand3(ray.direction);
                lambertianScatteringDirection = normalize(lambertianScatteringDirection / length(lambertianScatteringDirection) + hit.normal);
                ray.direction = lambertianScatteringDirection;
                hit = Trace(ray);
                result += Shade(hit, colorMultiplier);
                colorMultiplier *= hit.mat.diffuseColor;
            }
            
            
        }
        else
        {
            //result *= float3(0.78, 0.88, 1.0) * (0.2 * (dot(ray.direction, normalize(float3(1, 5, 1))) - 1) + 1);
            break;
        }
    }
    return result;
}


Ray CreateRay(float3 origin, float3 direction)
{
    Ray ray;
    ray.origin = origin;
    ray.direction = normalize(direction);
    return ray;
}
Ray CreateCameraRay(double2 uv)
{
    // Transform the camera origin to world space
    double3 origin = mul(_CameraToWorld, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;
    
    // Invert the perspective projection of the view-space position
    double3 direction = mul(_CameraInverseProjection, float4(uv, 0.0f, 1.0f)).xyz;
    // Transform the direction from camera to world space and normalize
    direction = mul(_CameraToWorld, float4(direction, 0.0f)).xyz;
    direction = (direction / length(direction));
    
    return CreateRay(origin, direction);
}


[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    uint width, height;
    Result.GetDimensions(width, height);
    
    double2 po = double2(_PixelOffset[0], _PixelOffset[1]);
    double2 uv = double2((id.xy + po) / double2(width, height) * 2.0 - 1.0);
    
    Ray ray = CreateCameraRay(uv);
    
    float3 result = RayTrace(ray);
    Result[id.xy] = float4(result, 1.0);
    //Result[id.xy] = float4(hit.normal, 1.0); 
    //Result[id.xy] = float4(id.x & id.y, (id.x & 15) / 15.0, (id.y & 15) / 15.0, 0.0);
}
